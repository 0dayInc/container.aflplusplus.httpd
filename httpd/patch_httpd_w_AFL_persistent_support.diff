--- server/main.c	2020-09-02 09:24:31.000000000 -0600
+++ server/main.AFL++.c	2020-09-02 12:09:55.000000000 -0600
@@ -14,6 +14,29 @@
  * limitations under the License.
  */
 
+// AFL++ SNIP
+#include <sched.h>
+#include <linux/sched.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <net/if.h>
+#include <net/route.h>
+#include <netinet/ip6.h>
+#include <netinet/tcp.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <strings.h>
+#include <sys/ioctl.h>
+#include <sys/resource.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+// AFL++ EOS
+
 #include "apr.h"
 #include "apr_strings.h"
 #include "apr_getopt.h"
@@ -485,12 +508,138 @@
     destroy_and_exit_process(process, 1);
 }
 
+// AFL++ SNIP
+//static void netIfaceUp(const char *ifacename)
+//{
+//    int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
+//    if (sock == -1) {
+//        perror("socket(AF_INET, SOCK_STREAM, IPPROTO_IP)");
+//        _exit(1);
+//    }
+//
+//    struct ifreq ifr;
+//    memset(&ifr, '\0', sizeof(ifr));
+//    snprintf(ifr.ifr_name, IF_NAMESIZE, "%s", ifacename);
+//
+//    if (ioctl(sock, SIOCGIFFLAGS, &ifr) == -1) {
+//        perror("ioctl(iface='lo', SIOCGIFFLAGS, IFF_UP)");
+//        _exit(1);
+//    }
+//
+//    ifr.ifr_flags |= (IFF_UP | IFF_RUNNING);
+//
+//    if (ioctl(sock, SIOCSIFFLAGS, &ifr) == -1) {
+//        perror("ioctl(iface='lo', SIOCSIFFLAGS, IFF_UP)");
+//        _exit(1);
+//    }
+//
+//    close(sock);
+//}
+
+//void unsh(void)
+//{
+//    unshare(CLONE_NEWUSER | CLONE_NEWNET | CLONE_NEWNS);
+//    netIfaceUp("lo");
+//}
+
+static void GETDATA(process_rec *process)
+{
+    int BUFSIZE=1024*1024;
+    usleep(10000);
+    char buf[BUFSIZE+1];
+    printf("[+] Launch loop...\n");
+    while ( __AFL_LOOP(1000) ){
+        printf("=> memset BUFSIZE to buf\n");
+        memset(buf, 0, BUFSIZE);
+        size_t read_bytes = read(0, buf, BUFSIZE);
+        buf[BUFSIZE-2] = '\r';
+        buf[BUFSIZE-1] = '\n';
+        buf[BUFSIZE] = '\0';
+
+        printf("=> init sockfd\n");
+        int sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
+        if (sockfd == -1) {
+            printf("[!] sockfd error!\n");
+            perror("socket");
+            //_exit(1);
+            destroy_and_exit_process(process, 1);
+        }
+
+        printf("=> init setsockopt\n");
+        int sz = (1024 * 1024);
+        if (setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &sz, sizeof(sz)) == -1) {
+            printf("[!] setsockopt error!\n");
+            perror("setsockopt");
+            //exit(1);
+            destroy_and_exit_process(process, 1);
+        }
+
+        printf("=> connecting to tcp port 80\n", buf);
+
+        struct sockaddr_in saddr;
+        saddr.sin_family = AF_INET;
+        saddr.sin_port = htons(80);
+        saddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+        if (connect(sockfd, &saddr, sizeof(saddr)) == -1) {
+            printf("[!] connect error!\n");
+            perror("connect");
+            continue;
+        }
+
+        printf("=> sending buf %s\n", buf);
+        if (send(sockfd, buf, read_bytes, MSG_NOSIGNAL) != read_bytes) {
+            printf("[!] failed to send payload!\n");
+            perror("send() failed 1");
+            //exit(1);
+            destroy_and_exit_process(process, 1);
+        }
+
+        printf("=> buf sent %s\n", &buf);
+
+        if (shutdown(sockfd, SHUT_WR) == -1) {
+            printf("[!] failed to shutdown sockfd!\n");
+            perror("shutdown");
+            //exit(1);
+            destroy_and_exit_process(process, 1);
+        }
+
+        char b[1024 * 1024];
+        while (recv(sockfd, b, sizeof(b), MSG_WAITALL) > 0) ;
+        printf("=> received from sockfd %s\n", b);
+
+        printf("=> closing sockfd\n");
+        close(sockfd);
+        printf("=> successfully closed sockfd\n");
+    }
+    printf("[+] Loop complete.\n");
+    usleep(100000);
+    destroy_and_exit_process(process, 0);
+    //_exit(0);
+    //xit(0);
+}
+
+static void LAUNCHTHR(process_rec *process)
+{
+    pthread_t t;
+    pthread_attr_t attr;
+
+    pthread_attr_init(&attr);
+    pthread_attr_setstacksize(&attr, 1024 * 1024 * 8);
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
+
+    pthread_create(&t, &attr, GETDATA, process);
+}
+
+//__AFL_FUZZ_INIT();
+// AFL++ EOS
+
 #ifdef HFND_FUZZING_ENTRY_FUNCTION
  HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv)
 #else
  int main(int argc, const char *const *argv)
 #endif
 {
+
     char c;
     int showcompile = 0, showdirectives = 0;
     const char *confname = SERVER_CONFIG_FILE;
@@ -498,6 +647,18 @@
     const char *temp_error_log = NULL;
     const char *error;
     process_rec *process;
+
+    // AFL++ SNIP
+//#ifdef __AFL_HAVE_MANUAL_CONTROL
+    //__AFL_INIT();
+    if (getenv("NO_FUZZ") == NULL) {
+        //unsh();
+        LAUNCHTHR(process);
+    }
+    //printf("[+] I did follow\n");
+//#endif
+    // AFL++ EOS
+
     apr_pool_t *pconf;
     apr_pool_t *plog; /* Pool of log streams, reset _after_ each read of conf */
     apr_pool_t *ptemp; /* Pool for temporary config stuff, reset often */
@@ -742,7 +903,11 @@
 
     /* If our config failed, deal with that here. */
     if (rv != OK) {
-        destroy_and_exit_process(process, 1);
+        // AFL++ SNIP
+        printf("[-] Config failed...\n");
+        destroy_and_exit_process(process, 0);
+        //destroy_and_exit_process(process, 1);
+        // AFL++ EOS        
     }
 
     signal_server = APR_RETRIEVE_OPTIONAL_FN(ap_signal_server);
@@ -750,6 +915,9 @@
         int exit_status;
 
         if (signal_server(&exit_status, pconf) != 0) {
+            // AFL++ SNIP
+            printf("[-] Server signaled out\n");
+            // AFL++ EOS
             destroy_and_exit_process(process, exit_status);
         }
     }
