--- server/main.c	2020-09-02 09:24:31.000000000 -0600
+++ server/main.AFL++.c	2020-09-04 11:25:53.000000000 -0600
@@ -14,6 +14,31 @@
  * limitations under the License.
  */
 
+// AFL++ SNIP
+#include <sched.h>
+#include <linux/sched.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <net/if.h>
+#include <net/route.h>
+#include <netinet/ip6.h>
+#include <netinet/tcp.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <strings.h>
+#include <sys/ioctl.h>
+#include <sys/resource.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+#include <unistd.h>
+
+//__AFL_FUZZ_INIT();
+// AFL++ EOS
+
 #include "apr.h"
 #include "apr_strings.h"
 #include "apr_getopt.h"
@@ -482,22 +507,154 @@
     ap_log_error(APLOG_MARK, APLOG_STARTUP, 0, NULL,
                  "  -X                 : debug mode (only one worker, do not detach)");
 
-    destroy_and_exit_process(process, 1);
+// AFL++ SNIP
+    destroy_and_exit_process(process, 0);
+// AFL++ EOS
 }
 
+// AFL++ SNIP
+static void INIT_AFL_MUTATION_SESSION(process_rec *process)
+{
+  unsigned int BUFSIZE=1024*1024;
+  char buf[BUFSIZE+1];
+
+  // DEFINE __AFL_LOOP() MUTATION ITERATIONS
+  // This may be waaaaay too low but hey let's give it a go...
+  //int iterations = 10;
+  // Recommended Default (At least initially)
+  int iterations = 1000;
+  //int iterations = 3000;
+  // This may be waaaaay too high but hey let's give it a go...
+  //int iterations = 300000;
+  // This is the max number of mutation iterations 
+  // may be used / loop (if 100% stability is reached)
+  //int iterations = 2147483647;
+
+  // Init Mutated Payload Vars
+  //ssize_t len;
+  //unsigned char *buf;
+
+  //unsigned int len;
+  //unsigned char *buf;
+  printf("[+]Deferring Initialization for Speed Boost...\n");
+  //__AFL_INIT();
+  //buf = __AFL_FUZZ_TESTCASE_BUF;
+  printf("[+] ENTERING __AFL_LOOP(%d)...\n", iterations);
+  while ( __AFL_LOOP(iterations) ){
+        printf("[+] Looping\n");
+        memset(buf, 0, BUFSIZE);
+        size_t read_bytes = read(0, buf, BUFSIZE);
+        buf[BUFSIZE-2] = '\r';
+        buf[BUFSIZE-1] = '\n';
+        buf[BUFSIZE] = '\0';
+
+        int sockfd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
+        if (sockfd == -1) {
+            perror("socket");
+            _exit(1);
+        }
+
+        int sz = (1024 * 1024);
+        if (setsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &sz, sizeof(sz)) == -1) {
+            perror("setsockopt");
+            exit(1);
+        }
+
+        printf("[+] Connecting\n", buf);
+
+        struct sockaddr_in saddr;
+        saddr.sin_family = AF_INET;
+        saddr.sin_port = htons(80);
+        saddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
+        if (connect(sockfd, &saddr, sizeof(saddr)) == -1) {
+            printf("[-] Connect failed\n");
+            perror("connect");
+            continue;
+        }
+
+        printf("[+] Sending buf %s\n", buf);
+
+        if (send(sockfd, buf, read_bytes, MSG_NOSIGNAL) != read_bytes) {
+            perror("send() failed 1");
+            exit(1);
+        }
+
+        printf("[+] Buf sent %s\n", &buf);
+
+        if (shutdown(sockfd, SHUT_WR) == -1) {
+            perror("shutdown");
+            exit(1);
+        }
+
+        char b[1024 * 1024];
+        while (recv(sockfd, b, sizeof(b), MSG_WAITALL) > 0) ;
+
+        printf("[+] Received %s\n", b);
+
+        close(sockfd);
+        printf("[+] Nice run\n");
+    }
+    printf("[+] Whew lad!\n");
+    usleep(100000);
+    //len = __AFL_FUZZ_TESTCASE_LEN;
+  printf("Removing %s\n", HTTPD_ROOT+DEFAULT_PIDLOG);
+  unlink(HTTPD_ROOT+DEFAULT_PIDLOG);
+   _exit(0);
+  exit(0);
+}
+
+static void INIT_AFL_THREAD(process_rec *process)
+{
+    pthread_t t;
+    pthread_attr_t attr;
+
+    pthread_attr_init(&attr);
+    pthread_attr_setstacksize(&attr, 1024 * 1024 * 8);
+    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
+
+    printf("[*]: CREATING AFL++ mutation thread...\n");
+    int err = pthread_create(&t, &attr, INIT_AFL_MUTATION_SESSION, process);
+    if (err != 0) {
+      printf("[!] %d: Unable to CREATE AFL++ mutation thread.\n", err);
+      printf("[!] Tearing down parent process gracefully...\n");
+      destroy_and_exit_process(process, err);
+    }
+
+    //err = pthread_join(t, &tret);
+    //if (err == 0) {
+    //  printf("Tearing down parent process gracefully...\n");
+    //  destroy_and_exit_process(process, 0);
+    //} else {
+    //  printf("[!] %d: Unable to JOIN AFL++ mutation thread.\n", err);
+    //  printf("[!] Tearing down parent process gracefully...\n");
+    //  destroy_and_exit_process(process, err);
+    //}
+}
+// AFL++ EOS
+
 #ifdef HFND_FUZZING_ENTRY_FUNCTION
  HFND_FUZZING_ENTRY_FUNCTION(int argc, const char *const *argv)
 #else
  int main(int argc, const char *const *argv)
 #endif
 {
+
+    // AFL++ SNIP
+    process_rec *process;
+    if (getenv("CRASH_TEST") == NULL) {
+      INIT_AFL_THREAD(process);
+    } else {
+      printf("[!] Crash Test Mode Initialized:\n");
+    }
+    // AFL++ EOS
+
     char c;
     int showcompile = 0, showdirectives = 0;
     const char *confname = SERVER_CONFIG_FILE;
     const char *def_server_root = HTTPD_ROOT;
     const char *temp_error_log = NULL;
     const char *error;
-    process_rec *process;
+
     apr_pool_t *pconf;
     apr_pool_t *plog; /* Pool of log streams, reset _after_ each read of conf */
     apr_pool_t *ptemp; /* Pool for temporary config stuff, reset often */
@@ -750,6 +907,9 @@
         int exit_status;
 
         if (signal_server(&exit_status, pconf) != 0) {
+            // AFL++ SNIP
+            printf("[!] ERROR: Server signaled out!\n");
+            // AFL++ EOS
             destroy_and_exit_process(process, exit_status);
         }
     }
